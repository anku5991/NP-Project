package Final;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import Final.Frame;
import Final.Trial;
import java.security.KeyFactory;
//import java.security.*;
import java.security.spec.X509EncodedKeySpec;
import java.io.*;
import java.net.*;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Random;
import javax.xml.bind.DatatypeConverter;
public class client {

	public static void main(String[] args) {
	try{
		


		Socket c=new Socket("localhost",3090);
		System.out.println("\n\n\nConnected to Server.\n\n");
		

		int a=0;
		ObjectOutputStream out=new ObjectOutputStream(c.getOutputStream());
		ObjectInputStream in=new ObjectInputStream(c.getInputStream());
		System.out.println("Exchanging Public KEys\n");
		


		KeyPair keyPair = Trial.buildKeyPair();
        PublicKey pubKey = keyPair.getPublic();
        PrivateKey privateKey = keyPair.getPrivate();
        PublicKey serverPubKey ;

		System.out.println("Client is Recieving Public KEY of Server ");
		Frame frame = (Frame)in.readObject();
		System.out.println("Client has Recieved Public KEY of Server\n\n ");
		byte[] spubKey = frame.data;                 
		X509EncodedKeySpec ks = new X509EncodedKeySpec(spubKey);
		KeyFactory kf= KeyFactory.getInstance("RSA");
		serverPubKey = kf.generatePublic(ks);

		frame = new Frame();
		frame.data = pubKey.getEncoded();
		System.out.println("Client is Sending its Public Key.");
		out.writeObject(frame);
		System.out.println("Client has sent its Public Key.\n\n");

		
		
		frame=(Frame)in.readObject();
		byte [] encrypted=frame.data;
		byte[] secret = Trial.decrypt(privateKey, encrypted);


        
		System.out.println("NONCE Authentication");
        // NONCE implementation

        Random rn=new Random();
        // Random Number generation
        
        int temp=rn.nextInt(10000);
        frame = new Frame();
        String str=null;
        frame.data=Trial.encrypt(serverPubKey, Trial.toString(temp,str));
       	// sending the Random Number generated
		out.writeObject(frame);
        // reading the Random Number sent by the server and Comaparing it with the Number generated by the client.
        frame=(Frame)in.readObject();
        int flag=1;
        encrypted=Trial.decrypt(privateKey, frame.data);
        if(Trial.toString(temp,str).equals(new String(encrypted))) {
        	System.out.println("Done Authentication.\n\nEnter BYE to Disconnect.\nEnter Your message.\n");}
        else{
        	flag=0;
        	System.out.println("Reconnect to the server.");
        	System.exit(0);
        }
		



		DataInputStream d1= new DataInputStream(System.in);
        while(true&&flag==1){
        	String toBeSent="";
        	toBeSent=d1.readLine();
        	String hashToBeSent="";
        	hashToBeSent=Trial.SHA1(toBeSent);

        	frame = new Frame();
        	frame.data=Trial.hexStringToByteArray(hashToBeSent);
        	out.writeObject(frame);
        	
        	frame=(Frame)in.readObject();
        	
        	frame = new Frame();
        	
        	frame.data=Trial.encrypt(serverPubKey,toBeSent);
        	
        	out.writeObject(frame);
        	frame=(Frame)in.readObject();
        	System.out.println("Message from Server is :"+new String(Trial.decrypt(privateKey, frame.data))+" \nEnter your message");
        	
        }

    }
catch(Exception e){System.out.println(e);}}}
